Installation steps for laravel

1.Install LAMP
check if 
    php >=5.6
     use cmmd : php -v

    OpenSSL php extension
        php -r "echo OPENSSL_VERSION_NUMBER;"

        PHP OpenSSL is provided as a DLL file called php_openssl.dll. PHP-Openssl is used for generation and verification of signatures and for sealing (encrypting) and opening (decrypting) data. OpenSSL is an open source project that provides a robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library. 

        
    PDO PHP Extension
        Using command line, for PDO:
        php -m|grep -i pdo

        For PDO with MySQL support:
        php -m|grep -i pdo_mysql

        To install php mysql support, search for the package name (Ubuntu):
        apt-cache search php7*|grep mysql

        And install it if not already did (Ubuntu):
        sudo apt-get install php-mysql


    Mbstring PHP Extension
        php -m
        sudo apt install php-mbstring

    Tokenizer PHP Extension
     its present




now incase composer and laravel dnt go together cz composer is upgraded then, following commands help:
sudo composer self-update

sudo composer clear-cahce

sudo composer config -g secure-http false

sudo composer update --no-scripts



git remote -v
helps to check if the remote is connected to the local repo
The repository you're trying to fetch must exist on GitHub, and the URL is case-sensitive.
You can find the URL of the local repository by opening the command line and typing git remote -v:

------------------
----------------------



reinstall ------------- 2.0 ------------------------->>

1. installed :
sudo apt-get update
sudo apt-get install gdebi
sudo apt-get install git
sudo apt-get install filezilla

sudo add-apt-repository ppa:webupd8team/sublime-text-3
sudo apt-get update
sudo apt-get install sublime-text-installer

download the composer as mentioned in their website.
now you can move/copy the composer.phar file to the /usr/local/bin dir so that composer is accessable from anywhere

virtualbox
https://www.virtualbox.org/wiki/Linux_Downloads

vagrant
https://www.vagrantup.com/downloads.html

sudo apt-get install php7.0

in terminal after everything is installed:
vagrant box add laravel/homestead

follow up by selecting one of the options- I have selected virtualbox


Since the whole server has vmware installed there is no need for it to be installed now but working in v/m would help us move the entire instance of work from one mc to another 




now inorder to install laravel :
composer global require "laravel/installer"

run it only once and later only for updating it
Make sure to place the "~/.composer/vendor/bin" directory (or the equivalent directory for your OS) in your PATH so the laravel executable can be located by your system.

sudo apt-get install php7.0-zip
since my php zip extension was missing.

sudo apt-get install php-xml
since php dom extension was missing


now install lamp server-
sudo apt-get install tasksel
sudo taskel install lamp-server

sudo apt-get install phpmyadmin






homestead: follow the steps written in the doc
 cd ~/.homestead
 subl Homestead.yaml
provider: virtualbox <-- in the file at end 




laravel new project18 
it would create a new laravel empty project by name "project18"


https://laracasts.com/lessons/say-hello-to-laravel-homestead-two





now there are some css dependencies that need to be installed for the css and script packages of the laravel-elixer
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs


----------------
----------------------------
---------------------------------------

Installing laravel on the server

check for os version running --
lsb_release -a
Red Hat Enterprise Linux Server release 6.7

check:  php -v : 5.6

apache version running
rpm -q httpd
httpd-2.2.15-45.el6.x86_64

mysql -V
5.5.49


folder create/delete
mkdir folder_name
rm -r -f folder_name

rm -- remove
-r -- remove subfolders/dependencies
-f -- remove by force 
folder_name -- path of the folder from where it has to be removed


For the server since it acts like a virtual m/c , it has its instances, we would not make use of laravel homestead vm instead we would directly install laravel framework on the server m/c


for installing node/npm packages :
 install node it comes with the npm package support 


---------------
NOTE: login into opr, go for root access 

install git on server

rpm -q qit -- check if its installed else

yum install git

follow it up by going in home/sayali folder

epel-release
ref -- http://tecadmin.net/install-laravel-framework-on-centos/

commmands 

wget http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm

inorder to verify epel repo
yum repolist




composer global require "laravel/installer"

or 

composer create-project laravel/laravel people_finder 5.2




composer create-project laravel/laravel your-project-name 4.0.*
Change "dev" to "stable" in composer.json

Then run

    composer self-update

After that, run this command

    composer update --no-scripts













laravels artisian : it's cli 
inorder to run the laravel server locally use:
php artisan serve

incase the artisan is listening at the regular port 8000 then use the below command:
php artisan serve --port="8001"






http://linoxide.com/linux-how-to/install-laravel-php-centos-7-ubuntu-15-04/
http://tecadmin.net/install-laravel-framework-on-centos/



-----------------------
------------------------------------------

environment path should be set properly in bashrc,
it refrence from .profilerc









-----------------
------------------------------

2nd june

logged in from user sayali project build up :

composer create-project laravel/laravel people_find

fetches up a new laravel project







make a layout file/master page (basic boiler plate)



inorder to prevent the redundancy :
or store the assests you want to use again after some time

create a new css and js folder in the public directory and store specific siles in them with href="/css/style.css" 


The only reason public is not written is, since we already have a server running with public directory as a document root 

eg. in Public directory : css and js folder is created 

view would be stored in resources -- create multiple folders/layout/widgets within it

preprocessor sass,less,style list ,concat js files/minify js files and that is the only thing you want to serve to production.


----------------------------------------------------------
Asset management with laravel elixir


package.json is the no js version of composer.json -- it uses npm and node json to install the dependies we need.
basic requirement is to install the nodejs 

for node.js :  install node it comes with the npm package support 
if not we make use of npm install.

inorder to check for any dependencies that would be present
all the dependencies installed would be placed in the node_modeules directory.

laravel uses a tool called laravel elixir. With help of laravel, all the mixtures can be properly stored.
this gulpfile comes with laravel installer but the dependencies need to be installed 

checkout gulpfile.js file--
its present outside, under the main directory

gulp is good bt every time a good amount of boiler plate needs to be added.
it can also be used for sass styling
eg. elixir(function(mix) {
    mix.sass('app.scss');
});
elixir(function(mix) {
    mix.less('app.less');
});
where exactly is the file located? its in the resources/assests/scss


If you want gulp-cli available on the command line, you need to install it globally.
sudo npm install --global gulp-cli
since root access would be required.

now type "gulp" in the cli,
this would give a minified version of apps.css or any other css file that has been used. 
also if less is used then the minified version of apps.less would be made.

if you want to use js files then use "browserify" 

copy/execute a file then change it in the gulp file


usually scss is used, it takes care of most of the prefixed files,minify them 


cli -> gulp

it will process the file and save it to a build/css/ directory

cli -> gulp watch 
inorder to keep track of all the changes done in gulp file.
also each time a change is done its compiled and notification for the same would be shown on the desktop, you can also check for the same by checking the hashed number of the file,after each compilation it would change.

-----------------------------
----------------------------------------------

the user has many cards--

limit those cards


php artisian make:controller CardsController -> this would make a conrtroller file 

for items which belong to a specific groupset then they should be clubbed in one folder

items for option : get,put,update,delete,

to store a data in a card -- post - the card data
put request to update card info
delete request follow basic principles of rest
return ("cards") -- incase you have multiple resources, put them in separate folders.

the db used -- mysql 






2ways : 1. laravels query builder
    2.laravels ORM called elequent

project --> config--> here all the config for every thing right from views, cache mechanism to database.




use database migrations incase multiple pple are working on the same project.
the are made as the project changes occur.

eg. a table has to be created then,
php artisan make:migration create_cards_table --create=cards


incase 





-------------------------------
---------------------------------------------------

laravel's ORM

php artisan make:model




http://stackoverflow.com/questions/30239194/laravel-mysql-database-connection

http://stackoverflow.com/questions/18059778/laravel-mysql-database-migrateinstall-error

http://stackoverflow.com/questions/10629917/mysql-database-setup-issue

http://stackoverflow.com/questions/2202888/mysql-database-setup-help

http://stackoverflow.com/questions/23437163/mysql-user-database-setup

http://stackoverflow.com/questions/31323633/laravel-mysql-database-error-unknown-database

---------------------------

https://docs.phpmyadmin.net/en/latest/setup.html
https://launchpad.net/~nijel/+archive/ubuntu/phpmyadmin
https://help.launchpad.net/Packaging/PPA
